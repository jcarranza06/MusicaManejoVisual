import numpy as np
import tensorflow as tf
from sklearn.datasets import make_moons
import matplotlib.pyplot as plt


a = {'X': [[26, 20, 10, 9], [21, 20, 18, 8], [21, 18, 17, 10], [22, 18, 19, 12], [14, 13, 26, 17], [15, 13, 31, 17], [18, 13, 29, 17], [13, 11, 30, 17], [18, 14, 28, 17], [15, 14, 32, 18], [15, 12, 32, 18], [16, 11, 34, 19], [14, 14, 38, 18], [25, 14, 6, 2], [7, 10, 44, 23], [12, 12, 37, 19], [7, 14, 43, 21], [11, 13, 43, 23], [5, 12, 45, 24], [6, 12, 46, 24], [6, 13, 44, 24], [5, 12, 44, 23], [6, 12, 45, 24], [8, 12, 44, 24], [7, 12, 44, 24], [8, 10, 44, 24], [8, 12, 44, 24], [22, 12, 8, 5], [22, 14, 9, 4], [7, 14, 44, 24], [37, 25, 2, 3], [31, 28, 3, 3], [38, 25, 1, 1], [34, 26, 1, 1], [37, 23, 4, 5], [35, 24, 2, 4], [28, 22, 11, 11], [28, 20, 14, 11], [27, 23, 15, 10], [26, 18, 18, 14], [23, 20, 19, 13], [29, 22, 18, 14], [21, 27, 3, 2], [21, 23, 3, 4], [22, 24, 1, 2], [24, 21, 3, 2], [24, 18, 20, 16], [21, 24, 6, 3], [19, 22, 7, 6], [17, 21, 9, 8], [22, 18, 21, 16], [20, 20, 20, 16], [10, 19, 14, 9], [15, 18, 16, 
11], [22, 20, 21, 17], [19, 14, 21, 18], [15, 18, 19, 13], [23, 18, 22, 20], [24, 20, 22, 19], [23, 14, 22, 21], [30, 23, 1, 1], [29, 21, 3, 2], [28, 22, 5, 4], [29, 22, 4, 4], [28, 21, 2, 3], [26, 22, 6, 6], [26, 21, 6, 9], [27, 21, 7, 8], [22, 18, 7, 8], [25, 18, 8, 9], [25, 18, 8, 9], [26, 18, 8, 9], [29, 22, 9, 9], [26, 18, 8, 9], [25, 18, 9, 9], [27, 20, 9, 9], [27, 20, 8, 10], [25, 20, 8, 8], [25, 20, 8, 8], [27, 21, 8, 9], [27, 19, 9, 9], [28, 20, 7, 9], [26, 18, 7, 9], [25, 18, 7, 9], [26, 18, 7, 10], 
[26, 20, 7, 8], [28, 20, 6, 9], [25, 20, 7, 9], [27, 20, 6, 9], [28, 21, 6, 8], [15, 18, 15, 16], [15, 
18, 15, 16], [3, 18, 15, 15], [7, 11, 40, 21], [8, 15, 43, 21], [8, 15, 41, 21], [7, 18, 45, 20], [6, 16, 44, 21], [6, 16, 44, 21], [3, 12, 27, 21], [5, 14, 45, 21], [8, 16, 44, 22], [5, 17, 50, 22], [5, 17, 46, 22], [4, 16, 50, 22], [6, 15, 43, 22], [5, 15, 43, 23], [9, 14, 20, 17], [6, 11, 41, 23], [3, 15, 23, 18], [4, 14, 44, 24], [4, 14, 44, 24], [3, 14, 47, 24], [6, 16, 26, 20], [3, 15, 16, 16], [3, 19, 
18, 15], [6, 20, 18, 16], [6, 18, 20, 16], [5, 14, 45, 23], [3, 16, 17, 16]], 'y': [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]}

X=a["X"]
y=np.array(a["y"])
print(X)
print()
X = np.array([subarr[:2] for subarr in X])
print(X)
#X = np.array(
#    [
#        [-2, 6],
#        [1, 7],
#        [3, 6],
#        [6, 2],
#        [6, -1],
#        [4, -2],
#        [2, -4],
#        [0, -5],
#        [-2, -3],
#        [-4, -1],
#        [-8, -2],
#        [-7, -4],
#    ]
#)
#y = np.array([0, 0, 0, 1, 1, 1, 2, 2, 2, 3, 3, 3])
plt.scatter(X[:,0][y==0], X[:,1][y==0], color="blue", label="class 0", alpha=.5)
plt.scatter(X[:,0][y==1], X[:,1][y==1], color="red", label="class 1", alpha=.5)
plt.scatter(X[:,0][y==2], X[:,1][y==2], color="green", label="class 2", alpha=.5)
plt.scatter(X[:,0][y==3], X[:,1][y==3], color="black", label="class 3", alpha=.5)
y = tf.keras.utils.to_categorical(y, num_classes=4)

print(X.shape)  # Esperado: (12, 2)
print(y.shape)  # Esperado: (12, 4)

model = tf.keras.Sequential(
    [
        tf.keras.layers.Dense(4, activation="tanh", input_shape=(2,)),
        tf.keras.layers.Dense(4, activation="softmax"),
    ]
)

model.compile(
    optimizer=tf.keras.optimizers.SGD(learning_rate=0.5),
    loss=tf.keras.losses.CategoricalCrossentropy(from_logits=False),
    metrics=["accuracy"],
)

model.fit(X, y, epochs=15, batch_size=1)

p = model.predict(
    np.array(
        [
            [-2, 3],
            [1, 5],
            [1, 7],
            [10, 5],
            [2, 1],
            [8, -4],
            [-2, -4],
            [-3, -6],
            [-1, -8],
            [-8, -2],
            [-8, 2],
            [-5, -1],
        ]
    )
)

print("hola")
print(p)
